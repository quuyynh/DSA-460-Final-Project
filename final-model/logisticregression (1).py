# -*- coding: utf-8 -*-
"""LogisticRegression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fyQyC4yscNU8V_jXs8C5J7DuBbYdTZEf

Logistic Regression
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.feature_selection import SequentialFeatureSelector

"""Run the Initail feature"""

df = pd.read_csv("mushrooms_named.csv")
features = [
  'odor', 'spore-print-color', 'gill-size', 'bruises', 'ring-type', 'population',
  'habitat','gill-color', 'cap-shape', 'veil-color','stalk-color-above-ring'
]

df = df[features + ['class']]

le = LabelEncoder()
df = df.copy()  # avoid SettingWithCopyWarning

for col in df.columns:
    df[col] = le.fit_transform(df[col])

X = df.drop('class', axis=1)
y = df['class']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

lr_model = LogisticRegression(max_iter=1000, random_state=42)
lr_model.fit(X_train_scaled, y_train)

y_pred = lr_model.predict(X_test_scaled)

print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("Accuracy:", accuracy_score(y_test, y_pred))

"""Cross Validate Features"""

X = df[features].copy()
y = df['class']

le = LabelEncoder()
for col in X.columns:
    X[col] = le.fit_transform(X[col])

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

lg = LogisticRegression(random_state=42)

sfs = SequentialFeatureSelector(lg,
                                 n_features_to_select='auto',
                                 direction='forward',
                                 scoring='accuracy',
                                 cv=5,
                                 n_jobs=-1)

sfs.fit(X_scaled, y)

selected_features = X.columns[sfs.get_support()]
print("Optimal features selected:")
print(selected_features.tolist())

"""Run the Features"""

features = [
    'gill-size', 'bruises', 'population', 'habitat', 'stalk-color-above-ring',
    'spore-print-color'
]

df = df[features + ['class']]

le = LabelEncoder()
df = df.copy()  # avoid SettingWithCopyWarning

for col in df.columns:
    df[col] = le.fit_transform(df[col])

X = df.drop('class', axis=1)
y = df['class']

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

lr_model = LogisticRegression(max_iter=1000, random_state=42)
lr_model.fit(X_train_scaled, y_train)

y_pred = lr_model.predict(X_test_scaled)

print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("Accuracy:", accuracy_score(y_test, y_pred))

